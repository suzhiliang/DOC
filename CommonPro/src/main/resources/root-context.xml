<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:jdbc="http://www.springframework.org/schema/jdbc" xmlns:jee="http://www.springframework.org/schema/jee"
	xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
	xsi:schemaLocation="
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.1.xsd
		http://www.springframework.org/schema/jdbc http://www.springframework.org/schema/jdbc/spring-jdbc-3.1.xsd
		http://www.springframework.org/schema/jee http://www.springframework.org/schema/jee/spring-jee-3.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.1.xsd
		http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd"
	default-lazy-init="true">
	<!--
	 Root Context: defines shared resources visible to all other web components 
	使用annotation 自动注册bean, 并保证@Required、@Autowired的属性被注入
	-->
	<context:component-scan base-package="com.iqcloud.common">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Controller" /> 
	</context:component-scan>
	<!-- Root Context: defines shared resources visible to all other web components -->
	<!-- MyBatis配置 -->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource" />
		<property name="configLocation" value="classpath:/mybatisDb/mybatis/map/configuration.xml" />  
		<!-- 自动扫描entity目录, 省掉Configuration.xml里的手工配置 -->
		<!-- <property name="typeAliasesPackage" value="com.yang.oa" /> -->
		<!-- 显式指定Mapper文件位置 -->
		<property name="mapperLocations" value="classpath:/mybatisDb/mybatis/map/**/*Mapper.xml" />
	</bean>
	<bean id="sqlSessionTemplate" class="org.mybatis.spring.SqlSessionTemplate">
    	<constructor-arg index="0" ref="sqlSessionFactory"/>
	</bean>
	<!-- 扫描basePackage下所有以@MyBatisRepository标识的 接口 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.iqcloud.auth" />
		<!-- <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory" /> -->
		<property name="sqlSessionTemplateBeanName" value="sqlSessionTemplate" />
	</bean>
	<bean id="transactionManager"
		class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource" />
	</bean>
	<!-- 使用annotation定义事务 -->
	<tx:annotation-driven transaction-manager="transactionManager"
		proxy-target-class="true" />
	<bean id="stat-filter" class="com.alibaba.druid.filter.stat.StatFilter">
	</bean>
 	<!-- 配置文件读取 -->
	<!-- <context:property-placeholder ignore-resource-not-found="true" location="classpath*:/application.properties" /> -->
	<bean id="iqCloudConfigBean" class="com.iqcloud.common.ConfigRead.IQCloudConfig" />
	<bean id="configPathBean" class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
			<property name="targetObject" ref="iqCloudConfigBean" />
			<property name="targetMethod" value="getConfigPathIncludePrefix" />
			<property name="arguments">
				<list>
					<value>true</value>
				</list>
         	</property>
	</bean>
	
	<bean id="configProperties" class="org.springframework.beans.factory.config.PropertiesFactoryBean">
        <property name="locations" ref="configPathBean" />
    </bean>
    <!-- <bean id="propertyConfigurer" class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
        <property name="ignoreResourceNotFound" value="false" />
        <property name="properties" ref="configProperties" />
    </bean> -->
    <bean id="propertyConfigurer" class="com.iqcloud.common.util.CustomPropertyConfigurer">
        <property name="ignoreResourceNotFound" value="false" />
        <property name="properties" ref="configProperties" />
    </bean>
	
	<bean id="masterdataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">		
		<property name="driverClassName">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>jdbc.driver</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="url">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOSWithDecode" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.jdbc.url</value>
						<value>db.decode</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="username">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOSWithDecode" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.jdbc.username</value>
						<value>db.decode</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="password">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOSWithDecode" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.jdbc.password</value>
						<value>db.decode</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="initialSize">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.jdbc.initialSize</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="minIdle">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.jdbc.minIdle</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="maxActive">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.jdbc.maxActive</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="maxWait">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.jdbc.maxWait</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="timeBetweenEvictionRunsMillis">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.jdbc.timeBetweenEvictionRunsMillis</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="minEvictableIdleTimeMillis">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.jdbc.minEvictableIdleTimeMillis</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="testOnBorrow">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.jdbc.testOnBorrow</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="defaultAutoCommit">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.jdbc.defaultAutoCommit</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="filters">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.jdbc.filters</value>
					</list>
         		</property>
			</bean>
		</property> 
	</bean>
	
	<bean id="slavedataSource" class="com.alibaba.druid.pool.DruidDataSource" destroy-method="close">
		<property name="driverClassName">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>jdbc.driver</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="url">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOSWithDecode" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.slave.jdbc.url</value>
						<value>db.decode</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="username">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOSWithDecode" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.slave.jdbc.username</value>
						<value>db.decode</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="password">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOSWithDecode" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.slave.jdbc.password</value>
						<value>db.decode</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="initialSize">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.slave.jdbc.initialSize</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="minIdle">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.slave.jdbc.minIdle</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="maxActive">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.slave.jdbc.maxActive</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="maxWait">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.slave.jdbc.maxWait</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="timeBetweenEvictionRunsMillis">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.slave.jdbc.timeBetweenEvictionRunsMillis</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="minEvictableIdleTimeMillis">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.slave.jdbc.minEvictableIdleTimeMillis</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="testOnBorrow">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.slave.jdbc.testOnBorrow</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="defaultAutoCommit">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.slave.jdbc.defaultAutoCommit</value>
					</list>
         		</property>
			</bean>
		</property>
		
		<property name="filters">
			<bean class="org.springframework.beans.factory.config.MethodInvokingFactoryBean">
				<property name="targetObject" ref="iqCloudConfigBean" />
				<property name="targetMethod" value="getParamValueNotOS" />
				<property name="arguments">
					<list>
						<value>db</value>
						<value>iqbasicdatadubboservice.slave.jdbc.filters</value>
					</list>
         		</property>
			</bean>
		</property>
	</bean>
	
	<bean id="dataSourceAdvice" class="com.iqcloud.common.datasource.DataSourceAdvice" >
		<property name="slaveSourceName" value="slavedataSource"></property>
	</bean>
	
	<bean id="dataSource" class="com.iqcloud.common.datasource.DynamicDataSource">     
		<property name="targetDataSources">
			<map key-type="java.lang.String">
				<entry key="slavedataSource" value-ref="slavedataSource" />
			</map>
		</property>
		<property name="defaultTargetDataSource" ref="masterdataSource" />
	</bean>

    <aop:aspectj-autoproxy proxy-target-class="true"/>
	  
    <aop:config>
		<aop:advisor
			pointcut="execution(* com.iqcloud.common..*Service.*(..))"
			advice-ref="dataSourceAdvice" />
	</aop:config>
</beans>













